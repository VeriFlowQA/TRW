name: VeriFlow Web | Compile Project

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

run-name: 'üë∑üöß[#${{ github.run_number }}][VeriFlow Compile | Web] PR: "${{ github.event.pull_request.title }}"'

on:
  pull_request:
    branches:
      - main
    paths:
      - 'VeriFlow/**'
      - 'VeriFlow_Web/**'
      - 'VeriFlow_Common/**'
      - 'VeriFlow_DB/**'
      - 'VeriFlow_API/**'
  push:
    branches:
      - main
    paths:
      - 'VeriFlow/**'
      - 'VeriFlow_Web/**'
      - 'VeriFlow_Common/**'
      - 'VeriFlow_DB/**'
      - 'VeriFlow_API/**'
  workflow_dispatch:

jobs:
  filter:
    name: "Filter changes"
    runs-on: ubuntu-latest
    outputs:
      mobile: ${{ steps.filter.outputs.mobile }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Detect VeriFlow_Mobile changes"
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            mobile:
              - 'VeriFlow_Mobile/**'

  build:
    name: "VeriFlow | Compile üõ†Ô∏è"
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.mobile != 'true'
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: "Cache Node.js modules"
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: "Install dependencies"
        id: install_dependencies
        run: npm install

      - name: "Compile TypeScript"
        id: build
        run: npm run build

      - name: "Set Compile Result"
        if: always()
        run: |
          YELLOW='\033[1;33m'
          RED='\033[1;31m'
          RESET='\033[0m'
          if [[ "${{ steps.install_dependencies.outcome }}" == "failure" || "${{ steps.build.outcome }}" == "failure" ]]; then
            echo "result=failure" >> $GITHUB_ENV
            echo -e "${RED}‚ùå [FAILED] Check the logs for more details.${RESET}"
            exit 1
          else
            echo "result=success" >> $GITHUB_ENV
            echo -e "${YELLOW}‚úÖ [PASSED]${RESET}"
          fi      

      - name: "Upload JUnit to Xray"
        if: ${{ env.result == 'success' }}
        run: npm run xray:upload
        env:
          XRAY_CLIENT_ID: ${{ secrets.XRAY_CLIENT_ID }}
          XRAY_CLIENT_SECRET: ${{ secrets.XRAY_CLIENT_SECRET }}

      - name: "Apply Labels"
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && always()
        uses: actions/github-script@v7
        env:
          result: ${{ env.result }}
        with:
          script: |
            const labels = [
              { name: 'build-success', color: '0E8A16', description: 'Build and tests succeeded' },
              { name: 'build-failure', color: 'B60205', description: 'Build or tests failed' }
            ];

            const resultLabel = process.env.result === 'success' ? 'build-success' : 'build-failure';
            const removeLabel = resultLabel === 'build-success' ? 'build-failure' : 'build-success';

            const issue_number = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            for (const label of labels) {
              try {
                await github.rest.issues.updateLabel({
                  owner,
                  repo,
                  name: label.name,
                  color: label.color,
                  description: label.description
                });
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: label.name,
                    color: label.color,
                    description: label.description
                  });
                }
              }
            }

            try {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number,
                name: removeLabel
              });
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number,
              labels: [resultLabel]
            });

      - name: "Post Comment on PR"
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const resultMessage = process.env.result === 'success'
              ? `‚úÖ Build completed successfully.\n\n[View Workflow Run](${url})`
              : `‚ùå Build failed, check the logs for more details..\n\n[View Workflow Run](${url})`;
      
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: resultMessage
            });
